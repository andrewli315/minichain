import os
import json

class minichain:
    """
        block header format is ""
        version, prev_block, merkle_root, target, nonce
    """
    def __init__(self, target):
        self.DIR = './blocks'
        if not os.path.isdir(self.DIR):
            os.makedirs(self.DIR,mode=0o777)
        self.target = target
        # genesis block is generated by nodes
        self.index = -1
        self.recent_block_hash = ''
        self.prev_hash = '0'*64
        #self.transaction = '000000000000'
        self.merkleroot = '0000000000000000000000000000000000000000000000000000000000000000'
        self.version = '00000001'

    def store_block(self,block,index):
        return block
    def insertBlock(self,block_header, block_hash):
        try:
            self.index = self.index + 1
            version = block_header[0:8]
            prev_hash = block_header[8:72]
            merkle_root = block_header[72:136]
            target = block_header[136:200]
            nonce = block_header[200:208]
            block = {
                    "block_header" : {
                        "version" : version,
                        "prev_hash" : prev_hash,
                        "merkle_root" : merkle_root,
                        "target" : target,
                        "nonce" : nonce,
                        },
                    "block_hash" : block_hash
                    }
            with open(self.DIR+'/'+str(self.index)+'.json', 'w+') as f:
                f.write(json.dumps(block))
                f.flush()
                f.close()
        except:
            return False
        return True
    def getBlockByIndex(self,index):
        return str(index)
    def getIndex(self):
        return self.index
    def getBlockByHash(self,current_hash):
        return 'null'
    def getDifficult(self):
        return self.target
    def getPrevHash(self):
        return self.prev_hash
    def getVersion(self):
        return self.version
    def getMerkleRoot(self):
        return self.merkleroot
    def getTarget(self):
        return self.target
